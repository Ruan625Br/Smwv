{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-is-smwv","title":"What is Smwv?","text":"<p>Smwv (SA-MP Mobile WebView) is a bidirectional Kotlin library that embeds WebView into SA-MP clients, allowing you to build interfaces using frameworks like React, Vue, and others.</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>The communication flow in Smwv operates in a bidirectional manner:</p> <ol> <li>Server to Smwv: The server sends data or events to Smwv.</li> <li>Smwv to WebView: Smwv relays this information to the embedded WebView, allowing it to update or change the UI accordingly.</li> <li>WebView to Smwv: User interactions or events in the WebView can be captured and sent back to Smwv.</li> <li>Smwv to Server: Finally, Smwv forwards these events back to the server for processing.</li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>The Smwv module is published to the Maven Central Repository.</p>"},{"location":"getting-started/installation/#smwv-client","title":"Smwv client","text":""},{"location":"getting-started/installation/#smwv-is-divided-into-two-you-need-to-include-the-dependencies-and-static-library-in-your-jni","title":"Smwv is divided into two, you need to include the dependencies and static library in your jni","text":""},{"location":"getting-started/installation/#add-dependency","title":"Add dependency:","text":"GroovyKotlinGradle Version Catalog <pre><code>implementation \"io.github.ruan625br:smwv:&lt;version&gt;\"\n</code></pre> <pre><code>implementation(\"io.github.ruan625br:smwv:&lt;version&gt;\")\n</code></pre> <pre><code>[versions]\nsmwv = \"&lt;version&gt;\"\n\n[libraries]\nsmwv = { module = \"io.github.ruan625br:smwv\", version.ref = \"smwv\" }\n</code></pre>"},{"location":"getting-started/installation/#buildgradlekts","title":"build.gradle.kts","text":"<pre><code>implementation(libs.smwv)\n</code></pre>"},{"location":"getting-started/installation/#adding-the-static-library","title":"Adding the static library","text":"<ol> <li>Download the static library from the release page</li> <li>Extract the file and copy the <code>mwv</code> folder to: /your_jni/vendor/.</li> <li>Open the <code>Android.mk</code> file and include <code>libMwv</code>: <pre><code>    ...\n\n    # libMwv\n    include $(CLEAR_VARS)\n    LOCAL_MODULE := libMwv\n    LOCAL_SRC_FILES := vendor/mwv/libMwv.a\n    include $(PREBUILT_STATIC_LIBRARY)\n\n    ...\n    LOCAL_STATIC_LIBRARIES := libMwv\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#setup-the-static-library","title":"Setup the static library","text":"<p>Open the file /your_jni/net/netgame.cpp Add the following code: <pre><code>    ...\n    #include \"vendor/mwv/Mwv.h\"\n\n    ...\n    CNetGame::CNetGame(const char* szHostOrIp, int iPort, const char* szPlayerName, const char* szPass)\n    {\n      ...\n      m_pRakClient = RakNetworkFactory::GetRakClientInterface();\n      if(!m_pRakClient) \n      {\n         Log(\"[err:NetGame]: m_pRakClient doesn't inited. Wtf?\");\n         exit(0);\n      }\n\n       mwv::initializeNetwork(m_pRakClient, ID_JUAN); //change ID_JUAN to another packet Id\n      ...\n    }\n\n\n   ...\n   void CNetGame::UpdateNetwork()\n   {\n      ...\n      switch(packetIdentifier)\n        {\n         ...\n           case ID_JUAN: // you packet Id\n                mwv::processIncomingPacket(pkt);\n                break;\n        }\n\n   }        \n</code></pre></p> <p>Warning</p> <p>The <code>ID_JUAN</code> is your packet id, check the availability in PacketEnumeration and create one</p>"},{"location":"getting-started/installation/#smwv-server","title":"Smwv server","text":"<ol> <li>Download the <code>SMWV.inc</code> file from the release page</li> <li>Copy to /your_server/pawno/include/</li> <li>Install the following plugins:<ul> <li>RakNet</li> <li>GVar</li> <li>json</li> </ul> </li> </ol>"},{"location":"getting-started/quick-start/client/","title":"Client","text":""},{"location":"getting-started/quick-start/client/#quick-start-client","title":"Quick start client","text":"<p>Open the file <code>app\\src\\main\\java\\com\\nvidia\\devtech\\NvEventQueueActivity.java</code> Add this code: <pre><code> private void initMwv(FrameLayout frameLayout){\n        mwvManager = new MwvManager(frameLayout, getInstance());\n        mwvManager.setup();\n}\n</code></pre></p> <p>Info</p> <p>Don't forget to initialize <code>mwvManager</code></p> <p>In the <code>systemInit</code> function: <pre><code> //...\n protected boolean systemInit() {\n     //...\n     mRootFrame = findViewById(R.id.main_frame);\n\n     //...\n\n     initMwv(mRootFrame);\n }\n</code></pre></p>"},{"location":"getting-started/quick-start/server/","title":"Quick Start server","text":""},{"location":"getting-started/quick-start/server/#1-configure-the-server","title":"1. Configure the Server","text":"<p>To use MWV, you need to include the following plugins in your code:</p> <pre><code>#include &lt;Pawn.RakNet&gt;\n#include &lt;json&gt;\n#include &lt;gvar&gt;\n#include &lt;SMWV&gt;\n</code></pre> <p>Warning</p> <p>You must set <code>mwv_packet_id</code> to the same value you set in jni <pre><code>#define mwv_packet_id 253\n</code></pre></p>"},{"location":"getting-started/quick-start/server/#2-registering-events","title":"2. Registering Events","text":"<p>You must register the events you want to use on your server. This should be done in the OnGameModeInit() function:</p> <pre><code>public OnGameModeInit()\n{\n    // Register events\n    MwvRegisterEvent(\"alert_response\", \"OnAlertResponse\");\n    MwvRegisterEvent(\"show_phone\", \"OnPhoneResponse\");\n    return 1;\n}\n</code></pre>"},{"location":"getting-started/quick-start/server/#3-initializing-the-browser-for-the-player","title":"3. Initializing the Browser for the Player","text":"<p>In the OnPlayerConnect event, you should initialize the browser for the player. Here's an example:</p> <pre><code>public OnPlayerConnect(playerid)\n{\n    // Initialize the browser with the desired URL\n    MwvInitBrowser(playerid, \"http://192.168.0.106:3000\");\n    MwvSetBrowserFocus(playerid, false);\n    SpawnPlayer(playerid); \n\n    return 1;\n}\n</code></pre>"},{"location":"getting-started/quick-start/server/#4-sending-events-to-the-browser","title":"4. Sending Events to the Browser","text":"<p>To send events to the browser, use the <code>MwvSendEvent</code> function. Here's an example of how to send an event when a player uses a command:</p> <pre><code>if (!strcmp(cmdtext, \"/mwv\")){\n    new Node:event_data_node = JSON_Object(\n        \"id\", JSON_Int(ALERT_SET_SKIN),\n        \"title\", JSON_String(\"Set Skin\"),\n        \"body\", JSON_String(\"Enter the skin ID\")\n    );\n\n    // Send the event to the browser\n    MwvSendEvent(playerid, \"create_dialog\", event_data);\n    return 1;\n}\n</code></pre>"},{"location":"getting-started/quick-start/server/#5-receiving-events-from-the-browser","title":"5. Receiving Events from the Browser","text":"<p>To receive events, you need to create a <code>forward</code> function with the same name as the registered callback. Below is an example of how to handle the response from an alert:</p> <pre><code>forward OnAlertResponse(playerid, event_data[]);\npublic OnAlertResponse(playerid, event_data[])\n{\n    MwvSetBrowserFocus(playerid, false);\n\n    new Node:event_data_node;\n    JSON_Parse(event_data, event_data_node);\n\n    new id, skin_id;\n    new bool:result;\n\n    JSON_GetInt(event_data_node, \"id\", id);\n    JSON_GetInt(event_data_node, \"skin_id\", skin_id);\n    JSON_GetBool(event_data_node, \"result\", result);\n\n    switch (id)\n    {\n        case ALERT_SET_SKIN:\n        {\n            if (!result)\n                return 1;\n\n            SetPlayerSkin(playerid, skin_id);\n            SendClientMessage(playerid, -1, \"[MWV] Skin set: %d\", skin_id);\n        }\n    }\n\n    return 1;\n}\n</code></pre>"},{"location":"getting-started/quick-start/web/","title":"Web","text":""},{"location":"getting-started/quick-start/web/#quick-start-web","title":"Quick Start Web","text":"<p>Please see the template repository, which can be used to kick-start your project.</p> <p>There are several ways to register your events:</p>"},{"location":"getting-started/quick-start/web/#1-registering-and-creating-events-manually","title":"1. Registering and Creating Events Manually","text":"<p>You can manually register events using <code>registerEventCallback: (eventName, callbackName) =&gt; void;</code>:</p> <pre><code>if (window.Mwv) {\n    window.Mwv.registerEventCallback(\"update_speed\", \"updateSpeed\");\n    window.Mwv.registerEventCallback(\"show_phone\", \"showPhone\");\n}\n</code></pre> <p>You must then create functions with the callback names in <code>global.d.ts</code>: <pre><code>export {};\n\ndeclare global {\n    interface Window {\n        // your events\n        updateSpeed: (data: string) =&gt; void;\n        showPhone: (data: string) =&gt; void;\n\n        // do not change\n        handleMwvEvent: (eventName: string, data: string) =&gt; void;\n        Mwv: {\n            registerEventCallback: (eventName: string, callbackName: string) =&gt; void;\n            sendEvent: (eventName: string, eventData: string) =&gt; void;\n        };\n    }\n}\n</code></pre></p> <p>Info</p> <p>The <code>data</code> parameter is required.</p> <p>You can use the registered events like this: <pre><code>function App() {\n    const [speed, setSpeed] = useState(0);\n    const [showPhone, setShowPhone] = useState(false);\n\n    useEffect(() =&gt; {\n        window.updateSpeed = (data) =&gt; {\n            const jsonData = JSON.parse(data);\n            const newSpeed = parseFloat(jsonData.speed);\n            setSpeed(newSpeed);\n        };\n\n        window.showPhone = () =&gt; {\n            setShowPhone(true);\n        };\n    }, [speed, showPhone]);\n}\n</code></pre></p>"},{"location":"getting-started/quick-start/web/#2-intercepting-events","title":"2. Intercepting Events","text":"<p>Another approach is to intercept the events directly. Here's an example: <pre><code>function App() {\n    const [speed, setSpeed] = useState(0);\n    const [showPhone, setShowPhone] = useState(false);\n\n    useEffect(() =&gt; {\n        window.handleMwvEvent = (eventName, data) =&gt; {\n            switch (eventName) {\n                case \"update_speed\": {\n                    const jsonData = JSON.parse(data);\n                    const newSpeed = parseFloat(jsonData.speed);\n                    setSpeed(newSpeed);\n                    break;\n                }\n                case \"show_phone\": {\n                    setShowPhone(true);\n                    break;\n                }\n                default:\n                    break;\n            }\n        };\n    }, [speed, showPhone]);\n}\n</code></pre></p>"},{"location":"getting-started/quick-start/web/#3-recommended-way","title":"3. Recommended Way","text":"<p>Of all the methods mentioned above, this is the approach I (Juan) recommend the most. Let Mwv handle the event registration for you: <pre><code>import { onMwvEvent } from './mwv';\n\nfunction App() {\n    const [speed, setSpeed] = useState(0);\n    const [showPhone, setShowPhone] = useState(false);\n\n    useEffect(() =&gt; {\n        onMwvEvent(\"update_speed\", data =&gt; {\n            const jsonData = JSON.parse(data);\n            const newSpeed = parseFloat(jsonData.speed);\n            setSpeed(newSpeed);\n        });\n\n        onMwvEvent(\"show_phone\", () =&gt; {\n            setShowPhone(true);\n        });\n\n        // You can register multiple functions for the same event\n        onMwvEvent(\"show_phone\", () =&gt; {\n            // do something else\n            console.log(\"Another action for show_phone event\");\n        });\n    }, [speed, showPhone]);\n}\n</code></pre></p> <p>One of the benefits of using <code>onMwvEvent</code> is that you can register multiple callbacks for the same event. For example, if you need to run several different functions when the <code>show_phone</code> event is triggered, you can easily do so by adding another <code>onMwvEvent(\"show_phone\", () =&gt; { /* code */ });</code>. This allows for greater flexibility in handling event-driven logic.</p>"}]}